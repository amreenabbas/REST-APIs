
import json
import random
import string

from flask import Flask, request
from tinydb import TinyDB, Query, where



from flask_httpauth import HTTPBasicAuth
from werkzeug.security import generate_password_hash, check_password_hash

db = TinyDB('db.json')
query = Query()
group = db.table('group')
res = db.table('reservation')
conf = db.table('configuration')
asynct = db.table('asynct')
users = db.table('users')

app = Flask(__name__)
auth = HTTPBasicAuth()

@app.route("/adduser", methods=["POST"])
def add_user():
    body = json.loads(request.data)
    user_id = body["id"]
    user_password = body["password"]
    if users.search(query.id == user_id):
        return 'Id already exists, status=409'
    users.insert({"id": user_id, "password": generate_password_hash(user_password)})
    return 'user added,status=201'

@app.route("/removeuser", methods=["POST"])
def rem_user():
    body = json.loads(request.data)
    user_id = body["id"]
    user_password = body["password"]
    info = users.search(where('id') == user_id)
    if users.search(query.id == user_id):
        if check_password_hash(info[0]['password'], user_password):
            users.remove(where('id') == user_id)
            return 'user removed, status=200'
        else:
            return 'wrong password '
    else:
        return 'id not found'

@app.route("/login", methods=["POST"])
def login():

    user_ = json.loads(request.data)
    info = users.search(where('id') == user_['id'])
    if check_password_hash(info[0]['password'],user_['password']):
        return 'status=200'
    else:
        return 'status=403'


@app.route('/groups',methods = ['POST'])
@auth.login_required
def crgroup():
    user = json.loads(request.data)
    g = "".join([random.choice(string.ascii_lowercase) for i in range(8)])+str(random.randint(1,10000))
    group.insert({'gid' : g, 'resources' : user["resources"]})
    return 'group-id %s'%g

@app.route('/groups/<gid>',methods = ['PUT','DELETE'])
@auth.login_required
def upgroup(gid):
    if request.method == 'PUT':
        if group.search(where('gid') == gid):
            user = json.loads(request.data)
            group.update({'resources': user["resources"]}, query.gid == gid)
            return '200 OK'
        else:
            return ' gid not found'
    elif request.method == 'DELETE':
        if group.search(where('gid') == gid):
            group.remove(where('gid') == gid)
            return '200 OK'
        else:
            return ' gid not found'

if __name__ == '__main__':
    app.run(debug = True)
