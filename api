#!/usr/bin/python

from flask import Flask, request
from tinydb import TinyDB, Query, where
from werkzeug.security import generate_password_hash, check_password_hash
import json
from flask_httpauth import HTTPBasicAuth
from datetime import datetime
import random
import string

db = TinyDB('db.json')
query = Query()
group = db.table('group')
res = db.table('reservation')
conf = db.table('configuration')
asynct = db.table('asynct')
users = db.table('users')
app = Flask(__name__)
auth = HTTPBasicAuth()

#TODO: Generate a password. If you need to calculate hash then also use a salt
#Rename the API to something else since this is a placeholder
@app.route("/adduser", methods=["POST"])
def add_user():
    body = json.loads(request.data)
    user_id = body["id"]
    user_password = body["password"]
    if users.search(query.id == user_id):
        return 'Id already exists, status=409'
    users.insert({"id": user_id, "password": generate_password_hash(user_password)})
    return 'user added,status=201'

#TODO: Remove this API
@app.route("/removeuser", methods=["POST"])
def rem_user():
    body = json.loads(request.data)
    user_id = body["id"]
    user_password = body["password"]
    if users.search(query.id == user_id):
        users.remove(where('id') == user_id)
        return 'user removed, status=200'
    return 'invalid id or password'

#TODO: If you use a salt you'll have to change the logic here
@app.route("/login", methods=["POST"])
def login():

    user_ = json.loads(request.data)
    info = users.search(where('id') == user_['id'])
    if check_password_hash(info[0]['password'],user_['password']):
        return 'status=200'
    else:
        return 'status=403'


#TODO: Use string.digits
@app.route('/groups',methods = ['POST'])
@auth.login_required
def crgroup():
    user = json.loads(request.data)
    g = "".join([random.choice(string.ascii_lowercase) for i in range(8)])+str(random.randint(1,10000))
    group.insert({'gid' : g, 'resources' : user["resources"]})
    return 'group-id %s'%g

#TODO: Check for user id and gid to prevent unauthorised operations.
#It would be better if every api takes username and password as headers.
#At least for the time being, so that we can avoid situations like these
@app.route('/groups/<gid>',methods = ['PUT','DELETE'])
@auth.login_required
def upgroup(gid):
    if request.method == 'PUT':
        if group.count(where('gid') == gid):
            user = json.loads(request.data)
            group.update({'resources': user["resources"]}, query.gid == gid)
            return '200 OK'
        else:
            return ' gid not found'
    elif request.method == 'DELETE':
        if group.count(where('gid') == gid):
            group.remove(where('gid') == gid)
            return '200 OK'
        else:
            return ' gid not found'

#TODO: Same as groups here
#Also use epoch instead of plain formats
@app.route('/reservations',methods=['POST'])
@auth.login_required
def reserve():
    user = json.loads(request.data)
    if group.count(where('gid') == user["gid"]):
        if res.search((where('gid') == user["gid"]) & (where('start-time') == user["start-time"]) & (where('end-time') == user["end-time"])):
            return 'already reserved'
        else:
            r = "".join([random.choice(string.ascii_lowercase) for i in range(8)])+str(random.randint(1,10000))
            res.insert({'gid': user["gid"], 'rid': r, 'start-time': user["start-time"],  'end-time': user["end-time"]})
	    #TODO: Check for uid. Do not hardcode configs
            conf.insert({'gid': user["gid"], 'rid': r,'volume' : '', 'brightness' : '','content' : ''})
            return 'reservation-id %s' % r
    else:
        return 'gid does not exist'

#TODO: Please check user is as well
@app.route('/reservations/<rid>', methods=['PUT','DELETE'])
@auth.login_required
def upreserve(rid):
    if request.method == 'PUT':
        if res.count(where('rid') == rid):
            user = json.loads(request.data)
            res.update({'start-time': user["start-time"], 'end-time' : user["end-time"]},query.rid == rid)
            return '200 OK'
        else:
            return ' rid not found'

    elif request.method == 'DELETE':
        if res.count(where('rid') == rid):
            res.remove(query.rid == rid)
            return '200 OK'
        else:
            return 'rid not found'

#TODO: Do not hardcode configs here. Let them be generic
@app.route('/sync-configurations', methods=['POST','PUT','DELETE'])
@auth.login_required
def configure():
    if request.method == 'POST':
        user = json.loads(request.data)
	#TODO: Check if user has an active channel
        if res.search((where('rid') == user["rid"]) & (where('gid') == user["gid"])):
            conf.update({'volume': user["volume"], 'brightness': user["brightness"],'content' : ''},(query.gid == user["gid"]) & (query.rid == user["rid"]))
            return 'created configurations'
        else:
            return 'rid and gid not found'
    if request.method == 'PUT':
        user = json.loads(request.data)
        if conf.search((where('rid') == user["rid"]) & (where('gid') == user["gid"])):
            conf.update({'volume': user["volume"], 'brightness' : user["brightness"]},(query.rid == user["rid"]) & (query.gid == user["gid"]))
            return '200 OK'
        else:
            return 'rid and gid not found'

    elif request.method == 'DELETE':
        user = json.loads(request.data)
        if conf.search((where('rid') == user["rid"]) & (where('gid') == user["gid"])):
            conf.remove((where('rid') == user["rid"]) & (where('gid') == user["gid"]))
            return '200 OK'
        else:
            return 'gid and rid not found'

@app.route('/sync-write', methods=['POST','PUT','DELETE'])
@auth.login_required
def write():
    if request.method == 'POST':
        user = json.loads(request.data)
	#TODO: Check if a channel has been created
        if res.count((where('rid') == user["rid"]) & (where('gid') == user["gid"])):
            conf.update({ 'content': user["content"]},(query.rid == user["rid"]) & (query.gid == user["gid"]))
            return 'data saved'
        else:
            return 'rid and gid not found'
    if request.method == 'PUT':
        user = json.loads(request.data)
        if res.count((where('rid') == user["rid"]) & (where('gid') == user["gid"])):
            conf.update({ 'content': user["content"]},(query.rid == user["rid"]) & (query.gid == user["gid"]))
            return '200 OK'
        else:
            return 'rid and gid not found'

    elif request.method == 'DELETE':
        user = json.loads(request.data)
        if res.count((where('rid') == user["rid"]) & (where('gid') == user["gid"])):
            conf.update({"content" : ""},(query.rid == user["rid"]) & (query.gid == user["gid"]))
            return '200 OK'
        else:
            return 'gid and rid not found'

#TODO: Operational status can also be on a specific device 
@app.route('/operational-status', methods=['POST'])
@auth.login_required
def opstat():
    user = json.loads(request.data)
    if res.count((where('rid') == user["rid"]) & (where('gid') == user["gid"])):
        if conf.count((where('rid') == user["rid"]) & (where('gid') == user["gid"])):
            st = conf.search((where('rid') == user["rid"]) & (where('gid') == user["gid"]))
            if st[0]['content'] != "":
                return 'content : %s' % st[0]['content']
            else:
                return 'content not written'
        else:
            return 'content not written' #??
    else:
        return 'rid and gid not found'

#TODO: What is the difference between the previous API and this?
@app.route('/device-status',methods = ['POST'])
@auth.login_required
def devstat():
    user = json.loads(request.data)
    if res.count((where('rid') == user["rid"]) & (where('gid') == user["gid"])):
        if conf.count((where('rid') == user["rid"]) & (where('gid') == user["gid"])):
            st = conf.search((where('rid') == user["rid"]) & (where('gid') == user["gid"]))
            return 'volume : %s , brightness : %s'% (st[0]['volume'],st[0]['brightness'])
        else:
            return 'no configurations created'
    else:
        return 'rid and gid not found'

#TODO: Don't have hard coded configs
@app.route('/async-configurations', methods=['POST'])
@auth.login_required
def asyncconfigure():
    user = json.loads(request.data)
    if res.count((where('rid') == user["rid"]) & (where('gid') == user["gid"])):
        asynct.insert({'rid': user["rid"], 'gid': user["gid"], 'volume': user["volume"], 'brightness': user["brightness"]})
        return '200 OK'
    else:
        return 'rid and gid not found'

#TODO: Same here
@app.route('/async-write',methods = ['POST'])
@auth.login_required
def asyncwrite():
    user = json.loads(request.data)
    if res.count((where('rid') == user["rid"]) & (where('gid') == user["gid"])):
        asynct.update({'rid': user["rid"], 'gid': user["gid"], 'content': user["content"]},(query.rid == user["rid"]) & (query.gid == user["gid"]))
        return '200 OK'
    else:
        return 'rid and gid not found'

#TODO: Where is priority checked?
@app.route('/open/channel',methods = ['POST'])
@auth.login_required
def opchannel():
    user = json.loads(request.data)
    if res.count((where('rid') == user["rid"]) & (where('gid') == user["gid"])):
        now = datetime.now()
        info1 = res.search((where('rid') == user["rid"]) & (where('gid') == user["gid"]))
        info = conf.search((where('rid') == user["rid"]) & (where('gid') == user["gid"]))
        st = info1[0]['start-time']
        et = info1[0]['end-time']
        st_obj = datetime.strptime(st, ' %Y-%m-%d %H:%M:%S')
        et_obj = datetime.strptime(et, '%Y-%m-%d %H:%M:%S')
        if (now >= st_obj) & (et_obj >= now ):
            cid = "".join([random.choice(string.ascii_lowercase) for i in range(8)])+str(random.randint(1,1000))
            res.update({"cid" : cid}, (query.rid == user["rid"]) & (query.gid == user["gid"]))
            info = conf.search((where('rid') == user["rid"]) & (where('gid') == user["gid"]))
            if info[0]["content"] == "" :
                obj = asynct.search((query.rid == user["rid"]) & (query.gid == user["gid"]))
                conf.update({'content' : obj[0]['content']},(query.rid == user["rid"]) & (query.gid == user["gid"]))
            if info[0]['brightness'] == '':
                obj = asynct.search((query.rid == user["rid"]) & (query.gid == user["gid"]))
                group.update({'brightness': obj[0]['brightness']}, (query.rid == user["rid"]) & (query.gid == user["gid"]))
            if info[0]['volume'] == '':
                obj = asynct.search((query.rid == user["rid"]) & (query.gid == user["gid"]))
                group.update({'volume': obj[0]['volume']}, (query.rid == user["rid"]) & (query.gid == user["gid"]))
            return 'channel-id is %s'%cid
        else:
            return 'time outside reservation time'
    else:
        return 'gid and rid not found'
@app.route('/close/channel',methods = ['POST'])
@auth.login_required
def clchannel():
    user = json.loads(request.data)
    if res.count((where('rid') == user["rid"]) | (where('cid') == user["cid"])):
        now = datetime.now()
        info = res.search((where('rid') == user["rid"]) | (where('cid') == user["cid"]))
        et = info[0]['end-time']
        et_obj = datetime.strptime(et, '%Y-%m-%d %H:%M:%S')
        if ( now > et_obj):
            res.remove((where('cid') == user["cid"]) | (where ('rid') == user["rid"]))
            conf.remove(where ('rid') == user["rid"])
            asynct.remove(where('rid') == user["rid"])
            return 'reservation time exceeded'
        else:
            res.remove((where('cid') == user["cid"]) | (where('rid') == user["rid"]))
            conf.remove(where('rid') == user["rid"])
            asynct.remove(where('rid') == user["rid"])
            return 'channel closed'
    else:
        return 'cid or rid does not exist'

@app.route('/suspend/channel', methods=['POST'])
@auth.login_required
def schannel():
    user = json.loads(request.data)
    if res.count((where('rid') == user["rid"]) | (where('cid') == user["cid"])):
        now = datetime.now()
        info = res.search((where('rid') == user["rid"]) | (where('cid') == user["cid"]))
        et = info[0]['end-time']
        et_obj = datetime.strptime(et, '%Y-%m-%d %H:%M:%S')
        now_obj = now.strftime('%Y-%m-%d %H:%M:%S')
        if (now < et_obj):
            res.update({"pause-time": now_obj, "status": "paused"}, (query.rid == user["rid"]) | (query.cid == user["cid"]))
            return 'channel suspended'
        else:
            return 'reservation time exceeded '
    else:
        return 'cid or rid does not exist'


@app.route('/resume/channel', methods=['POST'])
@auth.login_required
def rchannel():
    user = json.loads(request.data)
    if res.count((where('rid') == user["rid"]) | (where('cid') == user["cid"])):
        now = datetime.now()
        info = res.search((where('rid') == user["rid"]) | (where('cid') == user["cid"]))
        et = info[0]['end-time']
        et_obj = datetime.strptime(et, '%Y-%m-%d %H:%M:%S')
        if (now > et_obj):
            res.remove((where('cid') == user["cid"]) | (where('rid') == user["rid"]))
            conf.remove(where('rid') == user["rid"])
            asynct.remove(where('rid') == user["rid"])
            return 'reservation time exceeded'
        else:
            res.update({"pause-time": "", "status": "resume"}, (query.rid == user["rid"]) | (query.cid == user["cid"]))
            return 'channel resumed'

    else:
        return 'cid or rid does not exist'

if __name__ == '__main__':
    app.run(debug = True)
